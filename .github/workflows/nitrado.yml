name: Deploy to Nitrado Server

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no actual uploads)'
        type: boolean
        required: false
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Deploy to Nitrado
        env:
          NITRADO_API_TOKEN: ${{ secrets.NITRADO_API_TOKEN }}
          NITRADO_ID: ${{ secrets.NITRADO_ID }}
          SERVER_ID: ${{ secrets.SERVER_ID }}
          TEST_MODE: ${{ inputs.test_mode }}
        run: |
          cat > deploy_to_nitrado.py << 'EOF'
          import os
          import requests
          import json
          import hashlib
          from datetime import datetime

          class NitradoAPI:
                def __init__(self, token, nitrado_id, server_id):
                  self.token = token
                  self.nitrado_id = nitrado_id
                  self.server_id = server_id
                  self.headers = {'Authorization': f'Bearer {token}'}
                  
                def download_file(self, file_path):
                    """Download file from server"""
                     try:
                      url = f'https://api.nitrado.net/services/{self.nitrado_id}/gameservers/file_server/download?file=/games/{self.server_id}/ftproot/{file_path}'
                      print(f"Downloading from: {url}")
                      
                      response = requests.get(url, headers=self.headers, verify=False)
                      
                      if response.status_code == 200:
                          return response.content
                      elif response.status_code == 404:
                          print(f"ERROR: Required remote file not found: {file_path}")
                          print("Aborting deployment for safety.")
                          return None
                      else:
                          print(f"Error downloading {file_path}: {response.text}")
                          return None
                  except Exception as e:
                      print(f"Download error: {str(e)}")
                      return None
                      
                def upload_file(self, file_path, content):
                    """Upload file to server"""
                    if TEST_MODE:
                      print(f"TEST MODE: Would upload to {file_path} (size: {len(content)} bytes)")
                      return True
                      
                    try:
                        url = f'https://api.nitrado.net/services/{self.nitrado_id}/gameservers/file_server/upload'
                        response = requests.post(
                            url,
                            headers=self.headers,
                          data={
                              'path': f'/games/{self.server_id}/ftproot/{os.path.dirname(file_path)}',
                              'file': os.path.basename(file_path)
                          },
                          files={
                              'file': (os.path.basename(file_path), content)
                          },
                          verify=False
                      )
                      if response.status_code == 200:
                          print(f"Successfully uploaded to {file_path}")
                          return True
                      else:
                          print(f"Upload error: {response.text}")
                          return False
                  except Exception as e:
                      print(f"Upload error: {str(e)}")
                      return False
                      
              def restart_server(self):
                  """Restart the game server"""
                  if TEST_MODE:
                      print("TEST MODE: Would restart server")
                      return True
                      
                  try:
                      url = f'https://api.nitrado.net/services/{self.nitrado_id}/gameservers/restart'
                      response = requests.post(url, headers=self.headers, verify=False)
                      if response.status_code == 200:
                          print("Server restart initiated")
                          return True
                      else:
                          print(f"Restart error: {response.text}")
                          return False
                  except Exception as e:
                      print(f"Restart error: {str(e)}")
                      return False

          def get_file_hash(content):
              return hashlib.sha256(content).hexdigest()

          def compare_files(local_path, remote_content):
              try:
                  with open(local_path, 'rb') as f:
                      local_content = f.read()
                      
                  if remote_content is None:
                      return False, None
                      
                  local_hash = get_file_hash(local_content)
                  remote_hash = get_file_hash(remote_content)
                  
                  if local_hash != remote_hash:
                      print(f"File changed (different hash): {local_path}")
                      return True, local_content
                  else:
                      print(f"File unchanged: {local_path}")
                      return False, None
                      
              except Exception as e:
                  print(f"Error comparing files: {str(e)}")
                  return False, None

            def scan_repository_files():
              """Scan all files in the repository"""
              files_to_check = []
              base_dir = os.path.dirname(os.path.abspath(__file__))
              
              # Load config for base directory
              try:
                  with open('deploy-config.json', 'r') as f:
                      config = json.load(f)
                      base_remote_dir = config.get('deploy_directory', 'dayzxb_missions/dayzOffline.chernarusplus')
              except Exception as e:
                  print(f"Error loading config: {str(e)}")
                  return [], None
              
              print(f"Scanning repository files...")
              
              # Walk through all files in the repository
              for root, _, files in os.walk(base_dir):
                  # Skip .git directory and any other hidden directories
                  if '.git' in root or any(part.startswith('.') for part in root.split(os.sep)):
                      continue
                      
                  for file in files:
                      # Skip hidden files and deploy config
                      if file.startswith('.') or file == 'deploy-config.json' or file.endswith('.py'):
                          continue
                          
                      local_path = os.path.join(root, file)
                      # Make path relative to script directory
                      rel_path = os.path.relpath(local_path, base_dir)
                      
                      files_to_check.append({
                          'local_path': rel_path,
                          'remote_path': f"{base_remote_dir}/{rel_path}"
                      })
              
              print(f"Found {len(files_to_check)} files to process")
              return files_to_check, base_remote_dir

          def main():
              print(f"Running in {'TEST MODE' if TEST_MODE else 'PRODUCTION MODE'}")
              
              # Initialize API
              api = NitradoAPI(
                  os.environ['NITRADO_API_TOKEN'],
                  os.environ['NITRADO_LOGIN'],
                  os.environ['GAME_SERVER_ID']
              )
              
              # Scan repository for files
              files_to_check, base_remote_dir = scan_repository_files()
              if not files_to_check:
                  print("No files found to process")
                  return False
              
              # Load config for restart setting
              try:
                  with open('deploy-config.json', 'r') as f:
                      config = json.load(f)
                      restart_after_deploy = config.get('restart_after_deploy', True)
              except Exception as e:
                  print(f"Error loading config: {str(e)}")
                  return False
              
              files_uploaded = False
              errors = []
              
              # Process each file
              for file_info in files_to_check:
                  local_path = file_info['local_path']
                  remote_path = file_info['remote_path']
                  
                  print(f"\nChecking: {local_path} -> {remote_path}")
                  
                  # Download remote file for comparison
                  remote_content = api.download_file(remote_path)
                  if remote_content is None:
                      errors.append(f"Failed to download {remote_path}")
                      continue
                  
                  # Compare files
                  changed, local_content = compare_files(local_path, remote_content)
                  
                  if changed:
                      print(f"Processing: {local_path} -> {remote_path}")
                      
                      # Upload changed file
                      #if api.upload_file(remote_path, local_content):
                          #files_uploaded = True
                      #else:
                         # errors.append(f"Upload failed for {remote_path}")
              
              # Handle results
              if errors:
                  print("\nErrors occurred:")
                  for error in errors:
                      print(f"- {error}")
                  return False
              
              # Restart if needed
              if files_uploaded and restart_after_deploy:
                  print("\nRestarting server...")
                  if not api.restart_server():
                      print("Server restart failed")
                      return False
              
              return True
          EOF
          
          python deploy_to_nitrado.py
