name: Deploy to Nitrado Server

on:
  release:
    types: [published]
  # Optional: Enable manual triggering
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Deploy to Nitrado
        env:
          NITRADO_API_TOKEN: ${{ secrets.NITRADO_API_TOKEN }}
          GAME_SERVER_ID: ${{ secrets.GAME_SERVER_ID }}
        run: |
          cat > deploy_to_nitrado.py << 'EOF'
          import os
          import requests
          import json
          from datetime import datetime
          
          def create_backup(api_token, server_id, file_path):
              """Create a backup of the existing file"""
              headers = {
                  'Authorization': f'Bearer {api_token}'
              }
              
              url = f'https://api.nitrado.net/services/{server_id}/gameservers/file_server/download'
              params = {'file': file_path}
              
              response = requests.get(url, headers=headers, params=params)
              
              if response.status_code == 200:
                  timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                  backup_path = f"{file_path}.backup_{timestamp}"
                  
                  # Upload the backup
                  backup_data = {
                      'path': backup_path,
                      'file': response.text
                  }
                  
                  backup_url = f'https://api.nitrado.net/services/{server_id}/gameservers/file_server/upload'
                  backup_response = requests.post(backup_url, headers=headers, json=backup_data)
                  
                  if backup_response.status_code == 200:
                      print(f"Created backup at {backup_path}")
                  else:
                      print(f"Failed to create backup: {backup_response.text}")
                      return False
                      
              return True
          
          def upload_file(local_path, remote_path):
              """Upload file to Nitrado server"""
              api_token = os.environ['NITRADO_API_TOKEN']
              server_id = os.environ['GAME_SERVER_ID']
              
              headers = {
                  'Authorization': f'Bearer {api_token}',
                  'Content-Type': 'application/json'
              }
              
              # Create backup of existing file
              if not create_backup(api_token, server_id, remote_path):
                  print("Backup failed, aborting upload")
                  exit(1)
              
              # Read and upload new file
              try:
                  with open(local_path, 'r') as file:
                      file_content = file.read()
                  
                  url = f'https://api.nitrado.net/services/{server_id}/gameservers/file_server/upload'
                  
                  data = {
                      'path': remote_path,
                      'file': file_content
                  }
                  
                  response = requests.post(url, headers=headers, json=data)
                  
                  if response.status_code == 200:
                      print(f'Successfully uploaded {local_path} to {remote_path}')
                  else:
                      print(f'Failed to upload file: {response.text}')
                      exit(1)
                      
              except Exception as e:
                  print(f'Error during file upload: {str(e)}')
                  exit(1)
          
          def restart_server():
              """Restart the game server"""
              api_token = os.environ['NITRADO_API_TOKEN']
              server_id = os.environ['GAME_SERVER_ID']
              
              headers = {
                  'Authorization': f'Bearer {api_token}'
              }
              
              url = f'https://api.nitrado.net/services/{server_id}/gameservers/restart'
              
              response = requests.post(url, headers=headers)
              
              if response.status_code == 200:
                  print("Server restart initiated")
              else:
                  print(f"Failed to restart server: {response.text}")
          
          # Define files to upload
          files_to_upload = {
              # Local path : Remote path
              'configs/TraderConfig.json': '/games/dayz/config/TraderConfig.json',
              'configs/SpawnConfig.json': '/games/dayz/config/SpawnConfig.json'
          }
          
          # Upload each file
          for local_path, remote_path in files_to_upload.items():
              print(f"Processing {local_path}...")
              upload_file(local_path, remote_path)
          
          # Optionally restart the server
          restart_server()
          EOF
          
          python deploy_to_nitrado.py

      - name: Notify on success
        if: success()
        run: |
          echo "::notice::Successfully deployed configuration to Nitrado server"

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Failed to deploy configuration to Nitrado server"
